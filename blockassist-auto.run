#!/bin/bash

# Script tự động cài đặt blockassist với kiểm tra từng bước
set -e

# Màu sắc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Hàm hiển thị thông báo
info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. Kiểm tra và clone repo
check_and_clone_repo() {
    info "Bước 1: Kiểm tra repository blockassist..."
    
    if [ -d "blockassist" ]; then
        warning "Thư mục blockassist đã tồn tại, bỏ qua clone."
        cd blockassist
    else
        info "Clone repository blockassist..."
        git clone https://github.com/hiepntnaa/blockassist
        cd blockassist
    fi
}

# 2. Kiểm tra và cài đặt pyenv
check_and_install_pyenv() {
    info "Bước 2: Kiểm tra pyenv..."
    
    if command -v pyenv &> /dev/null; then
        warning "pyenv đã được cài đặt, phiên bản: $(pyenv --version)"
        return 0
    fi
    
    if [ -d "$HOME/.pyenv" ]; then
        warning "Thư mục .pyenv đã tồn tại"
    else
        info "Clone pyenv repository..."
        git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    fi
    
    info "Cấu hình pyenv trong bashrc..."
    
    # Kiểm tra xem đã có cấu hình pyenv chưa (kiểm tra cả block cấu hình)
    if ! grep -q "# pyenv configuration" ~/.bashrc; then
        {
            echo ''
            echo '# pyenv configuration'
            echo 'export PYENV_ROOT="$HOME/.pyenv"'
            echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
            echo 'eval "$(pyenv init --path)"'
            echo 'eval "$(pyenv init -)"'
        } >> ~/.bashrc
        info "Đã thêm cấu hình pyenv vào ~/.bashrc"
    else
        warning "Cấu hình pyenv đã tồn tại trong ~/.bashrc"
    fi
    
    # Load pyenv cho session hiện tại
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    
    info "pyenv đã được cài đặt thành công!"
}

# 3. Kiểm tra và cài đặt Python 3.10
check_and_install_python() {
    info "Bước 3: Kiểm tra Python 3.10..."
    
    # Load pyenv nếu chưa load
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)" 2>/dev/null || true
    eval "$(pyenv init -)" 2>/dev/null || true
    
    if pyenv versions | grep -q "3.10"; then
        warning "Python 3.10 đã được cài đặt qua pyenv"
        pyenv global 3.10
    else
        info "Cài đặt Python 3.10..."
        pyenv install 3.10
        pyenv global 3.10
        info "Python 3.10 đã được cài đặt thành công!"
    fi
    
    info "Phiên bản Python hiện tại: $(python --version)"
}

# 4. Chạy setup.sh nếu có
run_setup_script() {
    info "Bước 4: Kiểm tra setup.sh..."
    
    if [ -f "setup.sh" ]; then
        if [ -x "setup.sh" ]; then
            info "Chạy setup.sh..."
            ./setup.sh
        else
            info "Cấp quyền thực thi cho setup.sh..."
            chmod +x setup.sh
            ./setup.sh
        fi
    else
        warning "Không tìm thấy setup.sh, bỏ qua bước này."
    fi
}

# 5. Kiểm tra và cài đặt các thư viện Python
check_and_install_libraries() {
    info "Bước 5: Kiểm tra và cài đặt thư viện Python..."
    
    # Kiểm tra psutil
    if python -c "import psutil" 2>/dev/null; then
        warning "Thư viện psutil đã được cài đặt"
    else
        info "Cài đặt psutil..."
        pip install psutil
    fi
    
    # Kiểm tra readchar
    if python -c "import readchar" 2>/dev/null; then
        warning "Thư viện readchar đã được cài đặt"
    else
        info "Cài đặt readchar..."
        pip install readchar
    fi
    
    info "Tất cả thư viện đã được cài đặt!"
}

# 6. Tạo file auto.run
create_auto_run() {
    info "Bước 6: Tạo file auto.run..."
    
    if [ -f "/root/blockassist/auto.run" ]; then
        warning "File auto.run đã tồn tại, ghi đè..."
    fi
    
    cat > /root/blockassist/auto.run << 'AUTORUN_EOF'
#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}
print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Define paths
OVPN_SOURCE_DIR="/home/$(logname)/ovpn"
OVPN_DEST_PATH="/home/$(logname)/.ovpn.ovpn"
TOKEN_FILE="/home/$(logname)/gensyn/huggingface.token"
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="/root/blockassist/modal-login"
LOG_FILE="$BLOCKASSIST_DIR/LOG.log"

# Check if expect is installed
if ! command -v expect &> /dev/null; then
    apt-get update && apt-get install -y expect
fi

# Function to setup VPN
setup_vpn() {
    local i=$1
    local FOLDER_NAME=$(printf "%02d" "$i")
    local OVPN_SOURCE_FILE="$OVPN_SOURCE_DIR/$FOLDER_NAME/client2.ovpn" 
    # Check if source ovpn file exists
    if [ ! -f "$OVPN_SOURCE_FILE" ]; then
        print_error "File VPN k ton tai: $OVPN_SOURCE_FILE"
        return 1
    fi
    cp "$OVPN_SOURCE_FILE" "$OVPN_DEST_PATH"
    systemctl restart ovpn
    sleep 5
    ip=$(curl -4 ifconfig.me)
    print_info "VPN da duoc thiet lap thanh cong cho folder $FOLDER_NAME. IP hien tai la $ip"
}

# Function to copy training data
copy_training_data() {
    local i=$1
    local FOLDER_NAME=$(printf "%02d" "$i")
    local SOURCE_DIR="/home/$(logname)/gensyn/$FOLDER_NAME/temp-data" 
    if [ ! -d "$SOURCE_DIR" ]; then
        print_error "Thu muc nguon k ton tai: $SOURCE_DIR"
        return 1
    fi
    # Copy data
    rm -rf "$DEST_DIR/temp-data"
    cp -r "$SOURCE_DIR"/ "$DEST_DIR/"
}

# Function to run training
run_training() {
    local i=$1
    local FOLDER_NAME=$(printf "%02d" "$i")
    cd "$BLOCKASSIST_DIR"
    
    # Get token from file
    if [ ! -f "$TOKEN_FILE" ]; then
        print_error "File token k ton tai: $TOKEN_FILE"
        return 1
    fi
    
    # Get the specific line (token)
    TOKEN=$(sed -n "${i}p" "$TOKEN_FILE")
    if [ -z "$TOKEN" ]; then
        print_error "K the lay token tu dong $i trong file $TOKEN_FILE"
        return 1
    fi
    
    # Create a temporary expect script to handle the interactive input
    EXPECT_SCRIPT=$(mktemp)
    cat > "$EXPECT_SCRIPT" << 'EXPECT_HEREDOC'
#!/usr/bin/expect -f
set timeout -1
spawn python run.py
expect {
    "*token*" {
        send "$TOKEN\r"
        exp_continue
    }
    "*Token*" {
        send "$TOKEN\r"
        exp_continue
    }
    "*huggingface*" {
        send "$TOKEN\r"
        exp_continue
    }
    "*HuggingFace*" {
        send "$TOKEN\r"
        exp_continue
    }
    eof
}
EXPECT_HEREDOC
    chmod +x "$EXPECT_SCRIPT"
    
    # Run the script and log output
    print_info "Bat dau chay training..."
    {
        echo "$(date)"
        echo "Source: $FOLDER_NAME | IP: $ip"
        "$EXPECT_SCRIPT" 2>&1
        echo "=== Training completed at $(date) ==="
    } | tee -a "$LOG_FILE"
    
    # Cleanup
    rm -f "$EXPECT_SCRIPT"
    
    print_info "Training hoan thanh cho i = $i"
}

# Ghi log thoi gian bat dau
echo "Auto training session started at $(date)" | tee -a "$LOG_FILE"

# Lay danh sach token hop le (bo dong trong va dong comment #)
TOKENS=$(grep -vE '^\s*#|^\s*$' "$TOKEN_FILE")
NUM_LINES=$(echo "$TOKENS" | wc -l)

# Loop qua tung token hop le
for i in $(seq 1 "$NUM_LINES"); do
    FOLDER_NAME=$(printf "%02d" "$i")
    TOKEN=$(echo "$TOKENS" | sed -n "${i}p")

    print_info "Xu ly folder $FOLDER_NAME (i = $i)"
    
    # Buoc 1: Setup VPN
    if ! setup_vpn "$i"; then
        print_error "Loi thiet lap VPN cho i = $i. Bo qua..."
        continue
    fi
    
    # Buoc 2: Copy training data
    if ! copy_training_data "$i"; then
        print_error "Loi copy data cho i = $i. Bo qua..."
        continue
    fi
    
    # Buoc 3: Run training
    if ! run_training "$i"; then
        print_error "Loi training cho i = $i. Tiep tuc voi folder tiep theo..."
        continue
    fi
    
    # Nghi ngau nhien tu 20–40 giay
    SLEEP_TIME=$((RANDOM % 21 + 20))
    echo "Sleep $SLEEP_TIME seconds" | tee -a "$LOG_FILE"
    sleep $SLEEP_TIME
done
print_info "Xem logs: tail -f $LOG_FILE"
AUTORUN_EOF
    
    chmod +x /root/blockassist/auto.run
    info "File auto.run đã được tạo tại /root/blockassist/auto.run"
}

# 7. Hiển thị thông tin hoàn tất
show_completion_info() {
    echo ""
    echo "=========================================="
    info "CÀI ĐẶT HOÀN TẤT!"
    echo "=========================================="
    echo ""
    info "Vị trí: $(pwd)"
    info "Python version: $(python --version)"
    info "Pyenv version: $(pyenv --version)"
    echo ""
    warning "Lưu ý: Nếu đây là lần đầu cài đặt pyenv, hãy chạy:"
    echo "  source ~/.bashrc"
    echo "hoặc mở terminal mới để áp dụng cấu hình."
    echo ""
}

# Main execution
main() {
    info "Bắt đầu quá trình cài đặt blockassist..."
    echo ""
    
    check_and_clone_repo
    check_and_install_pyenv
    check_and_install_python
    run_setup_script
    check_and_install_libraries
    create_auto_run
    show_completion_info
}

# Chạy script
main
