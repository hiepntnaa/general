#!/bin/bash

# Script tự động cài đặt blockassist - Phiên bản không dùng hàm
set -e

# Màu sắc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}[INFO]${NC} Bắt đầu quá trình cài đặt blockassist..."
echo ""

# ==================== BƯỚC 1: KIỂM TRA VÀ CLONE REPO ====================
echo -e "${GREEN}[INFO]${NC} Bước 1: Kiểm tra repository blockassist..."

if [ -d "blockassist" ]; then
    echo -e "${YELLOW}[WARNING]${NC} Thư mục blockassist đã tồn tại, bỏ qua clone."
    cd blockassist
else
    echo -e "${GREEN}[INFO]${NC} Clone repository blockassist..."
    git clone https://github.com/hiepntnaa/blockassist
    cd blockassist
fi

# ==================== BƯỚC 2: KIỂM TRA VÀ CÀI ĐẶT PYENV ====================
echo -e "${GREEN}[INFO]${NC} Bước 2: Kiểm tra pyenv..."

if command -v pyenv &> /dev/null; then
    echo -e "${YELLOW}[WARNING]${NC} pyenv đã được cài đặt, phiên bản: $(pyenv --version)"
else
    if [ -d "$HOME/.pyenv" ]; then
        echo -e "${YELLOW}[WARNING]${NC} Thư mục .pyenv đã tồn tại"
    else
        echo -e "${GREEN}[INFO]${NC} Clone pyenv repository..."
        git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    fi
    
    echo -e "${GREEN}[INFO]${NC} Cấu hình pyenv trong bashrc..."
    
    if ! grep -q "# pyenv configuration" ~/.bashrc; then
        {
            echo ''
            echo '# pyenv configuration'
            echo 'export PYENV_ROOT="$HOME/.pyenv"'
            echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
            echo 'eval "$(pyenv init --path)"'
            echo 'eval "$(pyenv init -)"'
        } >> ~/.bashrc
        echo -e "${GREEN}[INFO]${NC} Đã thêm cấu hình pyenv vào ~/.bashrc"
    else
        echo -e "${YELLOW}[WARNING]${NC} Cấu hình pyenv đã tồn tại trong ~/.bashrc"
    fi
    
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    
    echo -e "${GREEN}[INFO]${NC} pyenv đã được cài đặt thành công!"
fi

# ==================== BƯỚC 3: KIỂM TRA VÀ CÀI ĐẶT PYTHON 3.10 ====================
echo -e "${GREEN}[INFO]${NC} Bước 3: Kiểm tra Python 3.10..."

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)" 2>/dev/null || true
eval "$(pyenv init -)" 2>/dev/null || true

if pyenv versions | grep -q "3.10"; then
    echo -e "${YELLOW}[WARNING]${NC} Python 3.10 đã được cài đặt qua pyenv"
    pyenv global 3.10
else
    echo -e "${GREEN}[INFO]${NC} Cài đặt Python 3.10..."
    pyenv install 3.10
    pyenv global 3.10
    echo -e "${GREEN}[INFO]${NC} Python 3.10 đã được cài đặt thành công!"
fi

echo -e "${GREEN}[INFO]${NC} Phiên bản Python hiện tại: $(python --version)"

# ==================== BƯỚC 4: CHẠY SETUP.SH NẾU CÓ ====================
echo -e "${GREEN}[INFO]${NC} Bước 4: Kiểm tra setup.sh..."

if [ -f "setup.sh" ]; then
    if [ -x "setup.sh" ]; then
        echo -e "${GREEN}[INFO]${NC} Chạy setup.sh..."
        ./setup.sh
    else
        echo -e "${GREEN}[INFO]${NC} Cấp quyền thực thi cho setup.sh..."
        chmod +x setup.sh
        ./setup.sh
    fi
else
    echo -e "${YELLOW}[WARNING]${NC} Không tìm thấy setup.sh, bỏ qua bước này."
fi

# ==================== BƯỚC 5: KIỂM TRA VÀ CÀI ĐẶT THỨ VIỆN PYTHON ====================
echo -e "${GREEN}[INFO]${NC} Bước 5: Kiểm tra và cài đặt thư viện Python..."

if python -c "import psutil" 2>/dev/null; then
    echo -e "${YELLOW}[WARNING]${NC} Thư viện psutil đã được cài đặt"
else
    echo -e "${GREEN}[INFO]${NC} Cài đặt psutil..."
    pip install psutil
fi

if python -c "import readchar" 2>/dev/null; then
    echo -e "${YELLOW}[WARNING]${NC} Thư viện readchar đã được cài đặt"
else
    echo -e "${GREEN}[INFO]${NC} Cài đặt readchar..."
    pip install readchar
fi

echo -e "${GREEN}[INFO]${NC} Tất cả thư viện đã được cài đặt!"

# ==================== BƯỚC 6: TẠO FILE AUTO.RUN ====================
echo -e "${GREEN}[INFO]${NC} Bước 6: Tạo file auto.run..."

if [ -f "/root/blockassist/auto.run" ]; then
    echo -e "${YELLOW}[WARNING]${NC} File auto.run đã tồn tại, ghi đè..."
fi

cat > /root/blockassist/auto.run << 'AUTORUN_EOF'
#!/bin/bash
set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

OVPN_SOURCE_DIR="/home/$(logname)/ovpn"
OVPN_DEST_PATH="/home/$(logname)/.ovpn.ovpn"
TOKEN_FILE="/home/$(logname)/gensyn/huggingface.token"
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="/root/blockassist/modal-login"
LOG_FILE="$BLOCKASSIST_DIR/LOG.log"

# Kiểm tra và cài expect nếu chưa có
if ! command -v expect &> /dev/null; then
    apt-get update && apt-get install -y expect
fi

echo "Auto training session started at $(date)" | tee -a "$LOG_FILE"

# Lấy danh sách token hợp lệ
TOKENS=$(grep -vE '^\s*#|^\s*$' "$TOKEN_FILE")
NUM_LINES=$(echo "$TOKENS" | wc -l)

# Lặp qua từng token
for i in $(seq 1 "$NUM_LINES"); do
    FOLDER_NAME=$(printf "%02d" "$i")
    TOKEN=$(echo "$TOKENS" | sed -n "${i}p")

    echo -e "${GREEN}[INFO]${NC} Xu ly folder $FOLDER_NAME (i = $i)"
    
    # ========== SETUP VPN ==========
    OVPN_SOURCE_FILE="$OVPN_SOURCE_DIR/$FOLDER_NAME/client2.ovpn" 
    
    if [ ! -f "$OVPN_SOURCE_FILE" ]; then
        echo -e "${RED}[ERROR]${NC} File VPN k ton tai: $OVPN_SOURCE_FILE"
        continue
    fi
    
    cp "$OVPN_SOURCE_FILE" "$OVPN_DEST_PATH"
    systemctl restart ovpn
    sleep 5
    ip=$(curl -4 ifconfig.me)
    echo -e "${GREEN}[INFO]${NC} VPN da duoc thiet lap thanh cong cho folder $FOLDER_NAME. IP hien tai la $ip"
    
    # ========== COPY TRAINING DATA ==========
    SOURCE_DIR="/home/$(logname)/gensyn/$FOLDER_NAME/temp-data" 
    
    if [ ! -d "$SOURCE_DIR" ]; then
        echo -e "${RED}[ERROR]${NC} Thu muc nguon k ton tai: $SOURCE_DIR"
        continue
    fi
    
    rm -rf "$DEST_DIR/temp-data"
    cp -r "$SOURCE_DIR"/ "$DEST_DIR/"
    
    # ========== RUN TRAINING ==========
    cd "$BLOCKASSIST_DIR"
    
    if [ ! -f "$TOKEN_FILE" ]; then
        echo -e "${RED}[ERROR]${NC} File token k ton tai: $TOKEN_FILE"
        continue
    fi
    
    if [ -z "$TOKEN" ]; then
        echo -e "${RED}[ERROR]${NC} K the lay token tu dong $i trong file $TOKEN_FILE"
        continue
    fi
    
    # Tạo expect script với TOKEN được truyền vào
    EXPECT_SCRIPT=$(mktemp)
    cat > "$EXPECT_SCRIPT" << EXPECT_HEREDOC
#!/usr/bin/expect -f
set timeout -1
set token "$TOKEN"
spawn python run.py
expect {
    "*token*" {
        send "\$token\r"
        exp_continue
    }
    "*Token*" {
        send "\$token\r"
        exp_continue
    }
    "*huggingface*" {
        send "\$token\r"
        exp_continue
    }
    "*HuggingFace*" {
        send "\$token\r"
        exp_continue
    }
    eof
}
EXPECT_HEREDOC
    
    chmod +x "$EXPECT_SCRIPT"
    
    echo -e "${GREEN}[INFO]${NC} Bat dau chay training..."
    {
        echo "$(date)"
        echo "Source: $FOLDER_NAME | IP: $ip"
        "$EXPECT_SCRIPT" 2>&1
        echo "=== Training completed at $(date) ==="
    } | tee -a "$LOG_FILE"
    
    rm -f "$EXPECT_SCRIPT"
    
    echo -e "${GREEN}[INFO]${NC} Training hoan thanh cho i = $i"
    
    # Nghỉ ngẫu nhiên 20-40 giây
    SLEEP_TIME=$((RANDOM % 21 + 20))
    echo "Sleep $SLEEP_TIME seconds" | tee -a "$LOG_FILE"
    sleep $SLEEP_TIME
done

echo -e "${GREEN}[INFO]${NC} Xem logs: tail -f $LOG_FILE"
AUTORUN_EOF

chmod +x /root/blockassist/auto.run
echo -e "${GREEN}[INFO]${NC} File auto.run đã được tạo tại /root/blockassist/auto.run"

# ==================== HIỂN THỊ THÔNG TIN HOÀN TẤT ====================
echo ""
echo "=========================================="
echo -e "${GREEN}[INFO]${NC} CÀI ĐẶT HOÀN TẤT!"
echo "=========================================="
echo ""
echo -e "${GREEN}[INFO]${NC} Vị trí: $(pwd)"
echo -e "${GREEN}[INFO]${NC} Python version: $(python --version)"
echo -e "${GREEN}[INFO]${NC} Pyenv version: $(pyenv --version)"
echo ""
echo -e "${YELLOW}[WARNING]${NC} Lưu ý: Nếu đây là lần đầu cài đặt pyenv, hãy chạy:"
echo "  source ~/.bashrc"
echo "hoặc mở terminal mới để áp dụng cấu hình."
echo ""
