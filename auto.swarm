#!/bin/bash
set -euo pipefail

# --- 1. Ki·ªÉm tra v√† y√™u c·∫ßu nh·∫≠p FOLDER n·∫øu ch∆∞a c√≥ ---
if [[ -z "${FOLDER:-}" ]]; then
  read -p "üìÅ Nh·∫≠p s·ªë th∆∞ m·ª•c FOLDER (v√≠ d·ª•: 01, 02, 03...): " FOLDER
  if [[ -z "$FOLDER" ]]; then
    echo "‚ùå FOLDER kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng! Script d·ª´ng l·∫°i."
    exit 1
  fi
fi

echo "‚úÖ S·ª≠ d·ª•ng FOLDER: $FOLDER"

USER_NAME=$(logname)
BASE_DIR="/home/$USER_NAME/gensyn/$FOLDER"
SRC_TEMP="$BASE_DIR/temp-data"
DEST_DIR="/root/rl-swarm"
CONFIG_FILE="$DEST_DIR/rgym_exp/config/rg-swarm.yaml"
BOOTNODES_FILE="/home/$USER_NAME/gensyn/run/bootnodes.txt"
USED_BOOTNODES_FILE="/tmp/used_bootnodes_$$.txt"

# T·∫°o file t·∫°m ƒë·ªÉ l∆∞u bootnode ƒë√£ d√πng
touch "$USED_BOOTNODES_FILE"

# --- 2. Ki·ªÉm tra t·ªìn t·∫°i c·ªßa c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt ---
if [[ ! -d "$BASE_DIR" ]]; then
  echo "‚ùå Th∆∞ m·ª•c $BASE_DIR kh√¥ng t·ªìn t·∫°i!"
  exit 1
fi

if [[ ! -d "$SRC_TEMP" ]]; then
  echo "‚ùå Th∆∞ m·ª•c $SRC_TEMP kh√¥ng t·ªìn t·∫°i!"
  exit 1
fi

# --- 3. Copy temp-data ---
echo "üìÇ Copy d·ªØ li·ªáu t·ª´ $SRC_TEMP ƒë·∫øn $DEST_DIR/modal-login ..."
cp -r "$SRC_TEMP" "$DEST_DIR/modal-login"

# --- 4. H√†m ch·ªçn ng·∫´u nhi√™n bootnode M·ªöI v√† c·∫≠p nh·∫≠t v√†o config ---
update_bootnode() {
  echo "üé≤ Ch·ªçn bootnode ng·∫´u nhi√™n..."
  
  # Ki·ªÉm tra file bootnodes c√≥ t·ªìn t·∫°i kh√¥ng
  if [ ! -f "$BOOTNODES_FILE" ]; then
    echo "‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥ng t√¨m th·∫•y file $BOOTNODES_FILE - gi·ªØ nguy√™n gi√° tr·ªã c≈©"
    return
  fi
  
  # Ki·ªÉm tra file c√≥ r·ªóng kh√¥ng
  if [ ! -s "$BOOTNODES_FILE" ]; then
    echo "‚ö†Ô∏è C·∫¢NH B√ÅO: File bootnode r·ªóng, d√πng bootnode c≈©"
    return
  fi
  
  # T·∫°o file t·∫°m ch·ª©a c√°c bootnode ch∆∞a d√πng
  TEMP_AVAILABLE="/tmp/available_bootnodes_$$.txt"
  
  # L·∫•y t·∫•t c·∫£ bootnode (b·ªè d√≤ng tr·ªëng)
  grep -v '^[[:space:]]*$' "$BOOTNODES_FILE" > "$TEMP_AVAILABLE"
  
  # Lo·∫°i b·ªè c√°c bootnode ƒë√£ d√πng
  if [ -s "$USED_BOOTNODES_FILE" ]; then
    while IFS= read -r used_bootnode; do
      grep -v "^${used_bootnode}$" "$TEMP_AVAILABLE" > "${TEMP_AVAILABLE}.tmp" || true
      mv "${TEMP_AVAILABLE}.tmp" "$TEMP_AVAILABLE" || true
    done < "$USED_BOOTNODES_FILE"
  fi
  
  # ƒê·∫øm s·ªë bootnode c√≤n l·∫°i
  AVAILABLE_COUNT=$(wc -l < "$TEMP_AVAILABLE" 2>/dev/null || echo "0")
  
  # N·∫øu h·∫øt bootnode, reset l·∫°i danh s√°ch
  if [ "$AVAILABLE_COUNT" -eq 0 ]; then
    echo "‚ÑπÔ∏è ƒê√£ d√πng h·∫øt bootnode, reset danh s√°ch..."
    > "$USED_BOOTNODES_FILE"  # X√≥a file ƒë√£ d√πng
    grep -v '^[[:space:]]*$' "$BOOTNODES_FILE" > "$TEMP_AVAILABLE"
    AVAILABLE_COUNT=$(wc -l < "$TEMP_AVAILABLE")
  fi
  
  # Ch·ªçn ng·∫´u nhi√™n m·ªôt bootnode
  RANDOM_BOOTNODE=$(shuf -n 1 "$TEMP_AVAILABLE")
  
  if [ -z "$RANDOM_BOOTNODE" ]; then
    echo "‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥ng l·∫•y ƒë∆∞·ª£c bootnode, d√πng bootnode c≈©"
    rm -f "$TEMP_AVAILABLE"
    return
  fi
  
  # L∆∞u bootnode v·ª´a ch·ªçn v√†o danh s√°ch ƒë√£ d√πng
  echo "$RANDOM_BOOTNODE" >> "$USED_BOOTNODES_FILE"
  
  # D·ªçn d·∫πp file t·∫°m
  rm -f "$TEMP_AVAILABLE"
  
  # Backup file config tr∆∞·ªõc khi s·ª≠a
  cp "$CONFIG_FILE" "$CONFIG_FILE.backup" 2>/dev/null || true
  
  # L·∫•y bootnode c≈© tr∆∞·ªõc khi thay th·∫ø
  OLD_BOOTNODE=$(grep -E "^[[:space:]]*-[[:space:]]*'/ip4" "$CONFIG_FILE" 2>/dev/null | head -1 | sed "s/^[[:space:]]*-[[:space:]]*//")
  
  # T√¨m v√† thay th·∫ø d√≤ng initial_peers b·∫±ng bootnode m·ªõi
  sed -i "/^[[:space:]]*-[[:space:]]*'\/ip4/c\    - '$RANDOM_BOOTNODE'" "$CONFIG_FILE"
  
  TOTAL_BOOTNODES=$(grep -v '^[[:space:]]*$' "$BOOTNODES_FILE" | wc -l)
  USED_COUNT=$(wc -l < "$USED_BOOTNODES_FILE")
  
  echo "üîÑ ƒê√£ c·∫≠p nh·∫≠t bootnode ($USED_COUNT/$TOTAL_BOOTNODES ƒë√£ d√πng):"
  echo "   C≈©: $OLD_BOOTNODE"
  echo "   M·ªõi: $RANDOM_BOOTNODE"
}

# --- 5. H√†m ch·∫°y 1 v√≤ng kh·ªüi ƒë·ªông - ki·ªÉm tra - d·ª´ng - di chuy·ªÉn ---
run_cycle() {
  local PEM_SUFFIX=$1
  
  update_bootnode
  
  echo "üîÑ Kh·ªüi ƒë·ªông l·∫°i rl-swarm..."
  systemctl restart rl-swarm
  
  echo "‚è≥ ƒêang ch·ªù file swarm.pem xu·∫•t hi·ªán..."
  SRC_PEM="$DEST_DIR/swarm.pem"
  
  while true; do
    if [[ -f "$SRC_PEM" ]]; then
      echo "‚úÖ Ph√°t hi·ªán swarm.pem ‚Äî d·ª´ng rl-swarm..."
      systemctl stop rl-swarm
      break
    fi
    sleep 5
  done
  
  # --- Di chuy·ªÉn swarm.pem ---
  DEST_PEM="$BASE_DIR/swarm.pem.$PEM_SUFFIX"
  
  if [[ -f "$SRC_PEM" ]]; then
    echo "üì¶ Di chuy·ªÉn $SRC_PEM ‚Üí $DEST_PEM"
    mv "$SRC_PEM" "$DEST_PEM"
  else
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y $SRC_PEM!"
  fi
  
  echo "‚úÖ V√≤ng $PEM_SUFFIX ho√†n t·∫•t"
  echo ""
}

# --- 6. Ch·∫°y 8 v√≤ng (t·ª´ 8 ƒë·∫øn 15) ---
echo "üöÄ B·∫Øt ƒë·∫ßu ch·∫°y 8 v√≤ng ƒë·ªÉ t·∫°o swarm.pem.8 ƒë·∫øn swarm.pem.15"
echo ""

for i in {8..15}; do
  echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
  echo "üî¢ V√≤ng $((i-7))/8 - T·∫°o swarm.pem.$i"
  echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
  run_cycle $i
done

# D·ªçn d·∫πp file t·∫°m
rm -f "$USED_BOOTNODES_FILE"

echo ""
echo "üéØ ‚úÖ HO√ÄN T·∫§T ‚Äî ƒê√£ t·∫°o 8 file swarm.pem t·ª´ swarm.pem.8 ƒë·∫øn swarm.pem.15"
echo "üìÅ V·ªã tr√≠: $BASE_DIR/"
echo "‚ú® Folder: $FOLDER"
